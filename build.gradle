plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.30'
    id("io.qameta.allure") version "2.8.1"
}

apply plugin: 'io.qameta.allure'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    clean = true
    useJUnit5 {
        version = allureVersion
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.github.tomakehurst:wiremock-jre8:2.27.2")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.0-M1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0-M1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.0-M1")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.11.1")
    implementation("org.seleniumhq.selenium:selenium-java:3.141.59")
    implementation("org.apache.logging.log4j:log4j-core:2.11.2")
    implementation("com.codeborne:selenide:5.16.2")
    implementation("com.squareup.okhttp3:okhttp:4.9.1")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.32")
    implementation("com.vladsch.kotlin-jdbc:kotlin-jdbc:0.5.2")
    implementation("mysql:mysql-connector-java:8.0.23")
    testImplementation("io.qameta.allure:allure-junit5:$allureVersion")
    testCompile("io.qameta.allure:allure-java-commons:$allureVersion")
    testCompile("io.qameta.allure:allure-attachments:$allureVersion")
    testCompile("io.qameta.allure:allure-generator:$allureVersion")
    testCompile("io.qameta.allure:allure-httpclient:$allureVersion")
    implementation("io.qameta.allure:allure-selenide:$allureVersion")
    runtimeOnly("org.aspectj:aspectjweaver:$aspectjweaverVersion")
}

tasks.test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
